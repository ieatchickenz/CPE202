'''
JeanReno Racines
CPE 202 - 07
PROJECT 1
1 - 13 - 19
'''


import unittest
from linked import *
from stacks import *
from queues import *


class TestCase(unittest.TestCase):

    def test_StackArray_boilerplate(self):
        s1 = StackArray(5)
        s2 = StackArray(5)
        self.assertEqual(s1.__repr__(), '[None, None, None, None, None]')
        self.assertEqual(s2.__repr__(), '[None, None, None, None, None]')
        self.assertTrue(s1 == s2)
        s1.push(5)
        s1.push(6)
        s1.push('Bob')
        s1.push(8)
        s1.push('Joey')
        s2.push('Joey')
        s2.push(8)
        s2.push('Bob')
        s2.push(6)
        s2.push(5)
        self.assertEqual(s1.__repr__(), '[5, 6, Bob, 8, Joey]')
        self.assertEqual(s2.__repr__(), '[Joey, 8, Bob, 6, 5]')
        self.assertFalse(s1 == s2)
        s1.pop()
        s1.pop()
        s2.pop()
        s2.pop()
        self.assertEqual(s1.__repr__(), '[5, 6, Bob, None, None]')
        self.assertEqual(s2.__repr__(), '[Joey, 8, Bob, None, None]')
        self.assertFalse(s1 == s2)
        s1.pop()
        s2.pop()
        self.assertEqual(s1.__repr__(), '[5, 6, None, None, None]')
        self.assertEqual(s2.__repr__(), '[Joey, 8, None, None, None]')
        self.assertFalse(s1 == s2)
        s1.pop()
        s1.pop()
        s2.pop()
        s2.pop()
        s1.push(1)
        s2.push('1')
        self.assertEqual(s1.__repr__(), '[1, None, None, None, None]')
        self.assertEqual(s2.__repr__(), '[1, None, None, None, None]')
        self.assertFalse(s1 == s2)

    def test_StackArray(self):
        stack = StackArray(5)
        self.assertEqual(stack.capacity, 5)
        self.assertEqual(stack.items, [None, None, None, None, None])
        self.assertEqual(stack.num_items, 0)
        self.assertEqual(stack.size(), 0)
        self.assertFalse(stack.is_full())
        self.assertTrue(stack.is_empty())
        self.assertEqual(stack.peek(), None)
        self.assertRaises(IndexError, stack.pop)
        stack.push(5)
        stack.push(6)
        stack.push('Bob')
        stack.push(8)
        stack.push('Joey')
        self.assertEqual(stack.capacity, 5)
        self.assertEqual(stack.items, [5, 6, 'Bob', 8, 'Joey'])
        self.assertEqual(stack.num_items, 5)
        self.assertEqual(stack.size(), 5)
        self.assertTrue(stack.is_full())
        self.assertFalse(stack.is_empty())
        self.assertEqual(stack.peek(), 'Joey')
        self.assertRaises(IndexError, stack.push, 7)
        stack.pop()
        stack.pop()
        self.assertEqual(stack.capacity, 5)
        self.assertEqual(stack.items, [5, 6, 'Bob', None, None])
        self.assertEqual(stack.num_items, 3)
        self.assertEqual(stack.size(), 3)
        self.assertFalse(stack.is_full())
        self.assertFalse(stack.is_empty())
        self.assertEqual(stack.peek(), 'Bob')

    def test_StackLinked_boilerplate(self):
        s1 = StackLinked(5)
        s2 = StackLinked(5)
        self.assertEqual(s1.__repr__(), 'None')
        self.assertEqual(s2.__repr__(), 'None')
        self.assertTrue(s1 == s2)
        s1.push(5)
        s1.push(6)
        s1.push('Bob')
        s1.push(8)
        s1.push('Joey')
        s2.push('Joey')
        s2.push(8)
        s2.push('Bob')
        s2.push(6)
        s2.push(5)
        self.assertEqual(s1.__repr__(), 'None, 5, 6, Bob, 8, Joey')
        self.assertEqual(s2.__repr__(), 'None, Joey, 8, Bob, 6, 5')
        self.assertFalse(s1 == s2)
        s1.pop()
        s1.pop()
        s2.pop()
        s2.pop()
        self.assertEqual(s1.__repr__(), 'None, 5, 6, Bob')
        self.assertEqual(s2.__repr__(), 'None, Joey, 8, Bob')
        self.assertFalse(s1 == s2)
        s1.pop()
        s2.pop()
        self.assertEqual(s1.__repr__(), 'None, 5, 6')
        self.assertEqual(s2.__repr__(), 'None, Joey, 8')
        self.assertFalse(s1 == s2)
        s1.pop()
        s1.pop()
        s2.pop()
        s2.pop()
        s1.push(1)
        s2.push('1')
        self.assertEqual(s1.__repr__(), 'None, 1')
        self.assertEqual(s2.__repr__(), 'None, 1')
        self.assertFalse(s1 == s2)

    def test_StackLinked(self):
        stack = StackArray(5)
        self.assertEqual(stack.capacity, 5)
        # self.assertEqual(stack.items, [None, None, None, None, None])
        self.assertEqual(stack.num_items, 0)
        self.assertEqual(stack.size(), 0)
        self.assertFalse(stack.is_full())
        self.assertTrue(stack.is_empty())
        self.assertEqual(stack.peek(), None)
        self.assertRaises(IndexError, stack.pop)
        stack.push(5)
        stack.push(6)
        stack.push('Bob')
        stack.push(8)
        stack.push('Joey')
        self.assertEqual(stack.capacity, 5)
        # self.assertEqual(stack.items, [5, 6, 'Bob', 8, 'Joey'])
        self.assertEqual(stack.num_items, 5)
        self.assertEqual(stack.size(), 5)
        self.assertTrue(stack.is_full())
        self.assertFalse(stack.is_empty())
        self.assertEqual(stack.peek(), 'Joey')
        self.assertRaises(IndexError, stack.push, 7)
        stack.pop()
        stack.pop()
        self.assertEqual(stack.capacity, 5)
        # self.assertEqual(stack.items, [5, 6, 'Bob', None, None])
        self.assertEqual(stack.num_items, 3)
        self.assertEqual(stack.size(), 3)
        self.assertFalse(stack.is_full())
        self.assertFalse(stack.is_empty())
        self.assertEqual(stack.peek(), 'Bob')


def main():
    # execute unit tests
    unittest.main()


if __name__ == '__main__':
    # execute main() function
    main()
